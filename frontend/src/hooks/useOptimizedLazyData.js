import { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { accountantDataAPI } from '../utils/accountantDataAPI';

export const useOptimizedLazyData = (user, initialTab = 'notDone') => {
  console.log(`[useOptimizedLazyData] Hook initialized with user:`, user?.login, 'initialTab:', initialTab);
  
  const [data, setData] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState(initialTab);
  const [columnSettings, setColumnSettings] = useState({});
  const [invoiceColumnSettings, setInvoiceColumnSettings] = useState({});
  const [accessRules, setAccessRules] = useState([]);
  const [roles, setRoles] = useState([]);
  const [isInitialized, setIsInitialized] = useState(false);
  const cacheRef = useRef({});
  const initializationRef = useRef(false);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  const initializeData = useCallback(async () => {
    if (!user || !user.login || !user.region || isInitialized || initializationRef.current) {
      console.warn('useOptimizedLazyData: User, login or region not defined or already initialized. Cannot fetch data.');
      return;
    }

    initializationRef.current = true;
    setLoading(true);
    setError(null);
    console.log(`[useOptimizedLazyData] üöÄ Initializing all data in single request...`);

    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
      const allData = await accountantDataAPI.getAllAccountantData(user, user.region);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ–¥–Ω–∏–º –≤–∏–∫–ª–∏–∫–æ–º –¥–ª—è –º—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—ó —Ä–µ-—Ä–µ–Ω–¥–µ—Ä—ñ–≤
      setData(prevData => {
        const newData = { ...prevData };
        if (allData.tasks) {
          Object.keys(allData.tasks).forEach(tab => {
            cacheRef.current[tab] = allData.tasks[tab];
            newData[tab] = allData.tasks[tab];
          });
        }
        return newData;
      });

      // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ —Å—Ç–∞–Ω–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
      setColumnSettings(allData.columnSettings || {});
      setInvoiceColumnSettings(allData.invoiceColumnSettings || {});
      setAccessRules(allData.accessRules || []);
      setRoles(allData.roles || []);
      setIsInitialized(true);
      
      console.log(`[useOptimizedLazyData] ‚úÖ All data initialized successfully`);
    } catch (err) {
      console.error(`[useOptimizedLazyData] ‚ùå Error initializing data:`, err);
      setError(err);
    } finally {
      setLoading(false);
    }
  }, [user?.login, user?.region, isInitialized]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏ (fallback)
  const fetchDataForTab = useCallback(async (tab) => {
    if (!user || !user.region) {
      console.warn('useOptimizedLazyData: User or user region is not defined. Cannot fetch data.');
      return [];
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    if (cacheRef.current[tab]) {
      console.log(`[useOptimizedLazyData] ‚úÖ Loading from cache for tab: ${tab}, count: ${cacheRef.current[tab].length}`);
      return cacheRef.current[tab];
    }

    setLoading(true);
    setError(null);
    console.log(`[useOptimizedLazyData] üöÄ Fetching data for tab: ${tab} from server`);

    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
      const tabData = await accountantDataAPI.getTabData(tab, user.region);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      cacheRef.current = { ...cacheRef.current, [tab]: tabData };
      console.log(`[useOptimizedLazyData] ‚úÖ Data fetched and cached for tab: ${tab}, count: ${tabData.length}`);
      return tabData;
    } catch (err) {
      console.error(`[useOptimizedLazyData] ‚ùå Error fetching data for tab ${tab}:`, err);
      setError(err);
      return [];
    } finally {
      setLoading(false);
    }
  }, [user?.region]);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  useEffect(() => {
    if (user && user.login && user.region && !isInitialized && !initializationRef.current) {
      initializeData();
    }
  }, [user?.login, user?.region, isInitialized]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏ (—è–∫—â–æ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ)
  useEffect(() => {
    if (user && isInitialized && !data[activeTab]) {
      const loadData = async () => {
        console.log(`[useOptimizedLazyData] Loading data for activeTab: ${activeTab}`);
        const tabData = await fetchDataForTab(activeTab);
        setData(prev => ({ ...prev, [activeTab]: tabData }));
      };
      loadData();
    }
  }, [activeTab, user?.region, isInitialized]);

  const refreshData = useCallback(async (tabToRefresh = activeTab) => {
    console.log(`[useOptimizedLazyData] üîÑ Refreshing data for tab: ${tabToRefresh}`);
    // –û—á–∏—â–∞—î–º–æ –∫–µ—à –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
    delete cacheRef.current[tabToRefresh];
    const freshData = await fetchDataForTab(tabToRefresh);
    setData(prev => ({ ...prev, [tabToRefresh]: freshData }));
  }, [activeTab, fetchDataForTab]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–µ—à—É –∑–æ–≤–Ω—ñ—à–Ω—ñ–º–∏ –¥–∞–Ω–∏–º–∏
  const preloadCache = useCallback((tab, data) => {
    console.log(`[useOptimizedLazyData] üì¶ Preloading cache for tab: ${tab}, count: ${data.length}`);
    cacheRef.current = { ...cacheRef.current, [tab]: data };
    setData(prev => ({ ...prev, [tab]: data }));
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ–ª–æ–Ω–æ–∫
  const updateColumnSettings = useCallback((settings) => {
    setColumnSettings(settings);
  }, []);

  const updateInvoiceColumnSettings = useCallback((settings) => {
    setInvoiceColumnSettings(settings);
  }, []);

  // –ú–µ–º–æ—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
  const currentTabData = useMemo(() => data[activeTab] || [], [data, activeTab]);
  
  // –ú–µ–º–æ—ñ–∑—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≤–¥–∞–Ω—å
  const getTabCount = useCallback((tabName) => (cacheRef.current[tabName] || []).length, []);

  return {
    data: currentTabData,
    loading,
    error,
    activeTab,
    setActiveTab,
    refreshData,
    preloadCache,
    allCachedData: data,
    getTabCount,
    // –ù–æ–≤—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    columnSettings,
    invoiceColumnSettings,
    accessRules,
    roles,
    isInitialized,
    updateColumnSettings,
    updateInvoiceColumnSettings
  };
};
