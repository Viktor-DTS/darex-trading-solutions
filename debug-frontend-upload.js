const https = require('https');

console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê FRONTEND –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø');
console.log('===================================\n');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ endpoint'—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
function checkInvoiceRequest(requestId) {
  return new Promise((resolve) => {
    console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ø–∏—Ç: ${requestId}`);
    
    https.get(`https://darex-trading-solutions.onrender.com/api/invoice-requests/${requestId}`, (res) => {
      let data = '';
      
      res.on('data', chunk => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log(`   Status: ${res.statusCode}`);
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(data);
            console.log('   üìä –î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É:');
            console.log(`      - ID: ${response._id}`);
            console.log(`      - –ù–æ–º–µ—Ä: ${response.requestNumber}`);
            console.log(`      - –°—Ç–∞—Ç—É—Å: ${response.status}`);
            console.log(`      - –ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä–∞—Ö—É–Ω–æ–∫: ${response.needInvoice}`);
            console.log(`      - –ü–æ—Ç—Ä—ñ–±–µ–Ω –∞–∫—Ç: ${response.needAct}`);
            console.log(`      - –§–∞–π–ª —Ä–∞—Ö—É–Ω–∫—É: ${response.invoiceFile || 'None'}`);
            console.log(`      - –§–∞–π–ª –∞–∫—Ç—É: ${response.actFile || 'None'}`);
            console.log(`      - –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É —Ä–∞—Ö—É–Ω–∫—É: ${response.invoiceFileName || 'None'}`);
            console.log(`      - –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –∞–∫—Ç—É: ${response.actFileName || 'None'}`);
            resolve(response);
          } catch (error) {
            console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:', error.message);
            resolve(null);
          }
        } else {
          console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É');
          resolve(null);
        }
      });
    }).on('error', (error) => {
      console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error.message);
      resolve(null);
    });
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
function checkAllInvoiceRequests() {
  return new Promise((resolve) => {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ –Ω–∞ —Ä–∞—Ö—É–Ω–∫–∏...');
    
    https.get('https://darex-trading-solutions.onrender.com/api/invoice-requests', (res) => {
      let data = '';
      
      res.on('data', chunk => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          const requests = response.data || response;
          console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${requests.length} –∑–∞–ø–∏—Ç—ñ–≤`);
          
          // –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –∑–∞–ø–∏—Ç–∏
          console.log('\nüìã –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∏:');
          requests.slice(-3).forEach((req, index) => {
            console.log(`   ${index + 1}. ${req._id} - ${req.requestNumber}`);
            console.log(`      –°—Ç–∞—Ç—É—Å: ${req.status}`);
            console.log(`      –§–∞–π–ª —Ä–∞—Ö—É–Ω–∫—É: ${req.invoiceFile ? '–Ñ' : '–ù–µ–º–∞—î'}`);
            console.log(`      –§–∞–π–ª –∞–∫—Ç—É: ${req.actFile ? '–Ñ' : '–ù–µ–º–∞—î'}`);
          });
          
          resolve(requests);
        } catch (error) {
          console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:', error.message);
          resolve([]);
        }
      });
    }).on('error', (error) => {
      console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error.message);
      resolve([]);
    });
  });
}

async function main() {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏
    const allRequests = await checkAllInvoiceRequests();
    
    if (allRequests.length > 0) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Ç –¥–µ—Ç–∞–ª—å–Ω–æ
      const lastRequest = allRequests[allRequests.length - 1];
      console.log(`\nüéØ –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É: ${lastRequest._id}`);
      await checkInvoiceRequest(lastRequest._id);
    }
    
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:');
    console.log('   1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ frontend –≤–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    console.log('   2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    console.log('   3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –ø–æ–º–∏–ª–∫–∏ JavaScript');
    console.log('   4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é—é—Ç—å –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π onChange');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

main();
