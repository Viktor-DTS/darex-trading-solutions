const https = require('https');

console.log('üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó –ü–ê–†–ê–ú–ï–¢–†–û–ú showAll');
console.log('==================================\n');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º showAll
function testWithShowAll(showAll) {
  return new Promise((resolve) => {
    const url = `https://darex-trading-solutions.onrender.com/api/invoice-requests?showAll=${showAll}`;
    console.log(`üîç –¢–µ—Å—Ç—É—î–º–æ –∑ showAll=${showAll}`);
    console.log(`   URL: ${url}`);
    
    const req = https.get(url, (res) => {
      let data = '';
      
      res.on('data', chunk => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log(`   Status: ${res.statusCode}`);
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(data);
            console.log('   ‚úÖ –£—Å–ø—ñ—à–Ω–æ');
            console.log('   üìä Response structure:');
            console.log(`      - success: ${response.success}`);
            console.log(`      - data type: ${typeof response.data}`);
            console.log(`      - data is array: ${Array.isArray(response.data)}`);
            if (Array.isArray(response.data)) {
              console.log(`      - data length: ${response.data.length}`);
              if (response.data.length > 0) {
                console.log('   üìã –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Ç:');
                const first = response.data[0];
                console.log(`      - ID: ${first._id}`);
                console.log(`      - –ù–æ–º–µ—Ä: ${first.requestNumber}`);
                console.log(`      - –°—Ç–∞—Ç—É—Å: ${first.status}`);
                console.log(`      - –ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä–∞—Ö—É–Ω–æ–∫: ${first.needInvoice}`);
                console.log(`      - –ü–æ—Ç—Ä—ñ–±–µ–Ω –∞–∫—Ç: ${first.needAct}`);
                console.log(`      - –§–∞–π–ª —Ä–∞—Ö—É–Ω–∫—É: ${first.invoiceFile ? '–Ñ' : '–ù–µ–º–∞—î'}`);
                console.log(`      - –§–∞–π–ª –∞–∫—Ç—É: ${first.actFile ? '–Ñ' : '–ù–µ–º–∞—î'}`);
              }
            } else {
              console.log('      - data –Ω–µ —î –º–∞—Å–∏–≤–æ–º!');
            }
            resolve(response);
          } catch (error) {
            console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:', error.message);
            console.log('   Raw response:', data.substring(0, 200) + '...');
            resolve(null);
          }
        } else {
          console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${res.statusCode}`);
          console.log('   Response:', data.substring(0, 200) + '...');
          resolve(null);
        }
        console.log('');
      });
    });
    
    req.on('error', (error) => {
      console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error.message);
      console.log('');
      resolve(null);
    });
    
    req.setTimeout(10000, () => {
      console.log('   ‚è∞ Timeout');
      console.log('');
      req.destroy();
      resolve(null);
    });
  });
}

async function main() {
  try {
    // –¢–µ—Å—Ç 1: –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ showAll (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º pending)
    await testWithShowAll('false');
    
    // –¢–µ—Å—Ç 2: –ó showAll=true (–≤—Å—ñ –∑–∞–ø–∏—Ç–∏)
    await testWithShowAll('true');
    
    console.log('‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
  }
}

main();
