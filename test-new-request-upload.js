const https = require('https');
const FormData = require('form-data');
const fs = require('fs');

console.log('üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –§–ê–ô–õ–Ü–í –î–õ–Ø –ù–û–í–û–á –ó–ê–Ø–í–ö–ò');
console.log('==================================================\n');

// –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π PDF —Ñ–∞–π–ª
const pdfContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj
3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 44
>>
stream
BT
/F1 12 Tf
100 700 Td
(Test Invoice PDF) Tj
ET
endstream
endobj
xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000206 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
299
%%EOF`;

const testFileName = 'test-invoice-new.pdf';
fs.writeFileSync(testFileName, pdfContent);

console.log(`üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π PDF —Ñ–∞–π–ª: ${testFileName}`);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫–∏
function getInvoiceRequests() {
  return new Promise((resolve) => {
    console.log('üîç –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫–∏...');
    
    https.get('https://darex-trading-solutions.onrender.com/api/invoice-requests', (res) => {
      let data = '';
      
      res.on('data', chunk => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          const requests = response.data || response;
          console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${requests.length} –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫–∏`);
          
          // –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Ç
          const latestRequest = requests[requests.length - 1];
          if (latestRequest) {
            console.log(`üéØ –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Ç: ${latestRequest._id}`);
            console.log(`   - –ù–æ–º–µ—Ä: ${latestRequest.requestNumber}`);
            console.log(`   - –ó–∞–º–æ–≤–Ω–∏–∫: ${latestRequest.companyDetails?.companyName || 'N/A'}`);
            console.log(`   - –°—Ç–∞—Ç—É—Å: ${latestRequest.status}`);
            console.log(`   - –ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä–∞—Ö—É–Ω–æ–∫: ${latestRequest.needInvoice}`);
            console.log(`   - –ü–æ—Ç—Ä—ñ–±–µ–Ω –∞–∫—Ç: ${latestRequest.needAct}`);
            resolve(latestRequest._id);
          } else {
            console.log('‚ùå –ó–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            resolve(null);
          }
        } catch (error) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.message);
          resolve(null);
        }
      });
    }).on('error', (error) => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error.message);
      resolve(null);
    });
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
function testUpload(url, formData, description) {
  return new Promise((resolve) => {
    console.log(`\nüîç –¢–µ—Å—Ç—É—î–º–æ: ${description}`);
    console.log(`   URL: ${url}`);
    
    const options = {
      method: 'POST',
      headers: formData.getHeaders()
    };
    
    const req = https.request(url, options, (res) => {
      let data = '';
      
      res.on('data', chunk => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log(`   Status: ${res.statusCode}`);
        if (res.statusCode === 200 || res.statusCode === 201) {
          console.log('   ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
          try {
            const response = JSON.parse(data);
            console.log('   üìÑ –§–∞–π–ª URL:', response.data?.invoiceFile || response.data?.actFile);
            console.log('   üìÑ –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É:', response.data?.invoiceFileName || response.data?.actFileName);
          } catch (e) {
            console.log('   Response (text):', data.substring(0, 200) + '...');
          }
        } else if (res.statusCode === 400) {
          console.log('   ‚ùå Bad Request');
          try {
            const response = JSON.parse(data);
            console.log('   Error:', response.message || response);
          } catch (e) {
            console.log('   Error (text):', data);
          }
        } else if (res.statusCode === 500) {
          console.log('   ‚ùå Server Error');
          console.log('   Error:', data);
        } else {
          console.log(`   ‚ö†Ô∏è  –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å: ${res.statusCode}`);
          console.log('   Response:', data.substring(0, 200) + '...');
        }
        resolve({ status: res.statusCode, data });
      });
    });
    
    req.on('error', (error) => {
      console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error.message);
      resolve({ status: 'error', error: error.message });
    });
    
    req.setTimeout(15000, () => {
      console.log('   ‚è∞ Timeout');
      req.destroy();
      resolve({ status: 'timeout' });
    });
    
    formData.pipe(req);
  });
}

async function main() {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
    const requestId = await getInvoiceRequests();
    
    if (!requestId) {
      console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
      return;
    }
    
    console.log(`\nüéØ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –∑–∞–ø–∏—Ç—É: ${requestId}`);
    
    // –¢–µ—Å—Ç 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É
    console.log('\nüìÑ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É...');
    const invoiceFormData = new FormData();
    invoiceFormData.append('invoiceFile', fs.createReadStream(testFileName));
    invoiceFormData.append('invoiceNumber', 'TEST-INVOICE-' + Date.now());
    
    await testUpload(
      `https://darex-trading-solutions.onrender.com/api/invoice-requests/${requestId}/upload`,
      invoiceFormData,
      '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É'
    );
    
    // –¢–µ—Å—Ç 2: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç—É
    console.log('\nüìã –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç—É...');
    const actFormData = new FormData();
    actFormData.append('actFile', fs.createReadStream(testFileName));
    
    await testUpload(
      `https://darex-trading-solutions.onrender.com/api/invoice-requests/${requestId}/upload-act`,
      actFormData,
      '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç—É'
    );
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    await new Promise((resolve) => {
      https.get(`https://darex-trading-solutions.onrender.com/api/invoice-requests/${requestId}`, (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          try {
            const response = JSON.parse(data);
            console.log('   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
            console.log(`      - –°—Ç–∞—Ç—É—Å: ${response.status || 'unknown'}`);
            console.log(`      - –§–∞–π–ª —Ä–∞—Ö—É–Ω–∫—É: ${response.invoiceFile || 'None'}`);
            console.log(`      - –§–∞–π–ª –∞–∫—Ç—É: ${response.actFile || 'None'}`);
          } catch (e) {
            console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É');
          }
          resolve();
        });
      }).on('error', (error) => {
        console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
        resolve();
      });
    });
    
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –≤–¥–∞–≤—Å—è:', error.message);
  } finally {
    // –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
    try {
      fs.unlinkSync(testFileName);
      console.log(`\nüßπ –í–∏–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª: ${testFileName}`);
    } catch (e) {
      console.log(`\n‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª: ${e.message}`);
    }
  }
}

main();
