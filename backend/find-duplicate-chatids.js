#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—à—É–∫—É –≤—Å—ñ—Ö –¥—É–±–ª—é–≤–∞–Ω—å Chat ID –≤ —Å–∏—Å—Ç–µ–º—ñ
 */

const mongoose = require('mongoose');
require('dotenv').config({ path: './config.env' });

// –°—Ö–µ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const userSchema = new mongoose.Schema({
  login: String,
  password: String,
  role: String,
  name: String,
  region: String,
  columnsSettings: Object,
  id: Number,
  telegramChatId: String,
  lastActivity: { type: Date, default: Date.now },
  notificationSettings: {
    newRequests: { type: Boolean, default: false },
    pendingApproval: { type: Boolean, default: false },
    accountantApproval: { type: Boolean, default: false },
    approvedRequests: { type: Boolean, default: false },
    rejectedRequests: { type: Boolean, default: false },
    invoiceRequests: { type: Boolean, default: false },
    completedInvoices: { type: Boolean, default: false },
    systemNotifications: { type: Boolean, default: false }
  }
});

const User = mongoose.model('User', userSchema);

async function findDuplicateChatIds() {
  try {
    console.log('üîç –ü–æ—à—É–∫ –¥—É–±–ª—é–≤–∞–Ω—å Chat ID –≤ —Å–∏—Å—Ç–µ–º—ñ...\n');
    
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/dts-service';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB\n');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Telegram Chat ID
    const usersWithTelegram = await User.find({
      telegramChatId: { 
        $exists: true, 
        $ne: null, 
        $ne: '', 
        $ne: 'Chat ID' 
      }
    }).sort({ telegramChatId: 1 });
    
    console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Telegram Chat ID: ${usersWithTelegram.length}\n`);
    
    // –ì—Ä—É–ø—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ Chat ID
    const chatIdGroups = {};
    
    for (const user of usersWithTelegram) {
      const chatId = user.telegramChatId;
      if (!chatIdGroups[chatId]) {
        chatIdGroups[chatId] = [];
      }
      chatIdGroups[chatId].push(user);
    }
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    const duplicates = {};
    const uniqueChatIds = {};
    
    for (const [chatId, users] of Object.entries(chatIdGroups)) {
      if (users.length > 1) {
        duplicates[chatId] = users;
      } else {
        uniqueChatIds[chatId] = users[0];
      }
    }
    
    // –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    console.log('üö® === –î–£–ë–õ–Æ–í–ê–ù–ù–Ø CHAT ID ===');
    
    if (Object.keys(duplicates).length === 0) {
      console.log('‚úÖ –î—É–±–ª—é–≤–∞–Ω—å Chat ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
    } else {
      console.log(`‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ ${Object.keys(duplicates).length} –¥—É–±–ª—é–≤–∞–Ω—å Chat ID:\n`);
      
      for (const [chatId, users] of Object.entries(duplicates)) {
        console.log(`üì± Chat ID: ${chatId}`);
        console.log(`   –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${users.length}`);
        
        for (const user of users) {
          console.log(`   üë§ ${user.login} (${user.name}) - –†–æ–ª—å: ${user.role} - –†–µ–≥—ñ–æ–Ω: ${user.region}`);
          
          // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
          if (user.notificationSettings) {
            const enabledNotifications = Object.entries(user.notificationSettings)
              .filter(([key, value]) => value === true)
              .map(([key]) => key);
            
            if (enabledNotifications.length > 0) {
              console.log(`      üìã –£–≤—ñ–º–∫–Ω–µ–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: ${enabledNotifications.join(', ')}`);
            } else {
              console.log(`      üìã –£–≤—ñ–º–∫–Ω–µ–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: –Ω–µ–º–∞—î`);
            }
          }
        }
        console.log('');
      }
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    console.log(`   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Telegram: ${usersWithTelegram.length}`);
    console.log(`   –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö Chat ID: ${Object.keys(uniqueChatIds).length}`);
    console.log(`   –î—É–±–ª—é–≤–∞–Ω—å Chat ID: ${Object.keys(duplicates).length}`);
    console.log(`   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è–º–∏: ${Object.values(duplicates).flat().length}`);
    
    // –ü—Ä–æ–±–ª–µ–º–Ω—ñ Chat ID
    console.log('\n‚ö†Ô∏è === –ü–†–û–ë–õ–ï–ú–ù–Ü CHAT ID ===');
    
    const problematicChatIds = [];
    
    for (const [chatId, users] of Object.entries(duplicates)) {
      const roles = users.map(u => u.role);
      const uniqueRoles = [...new Set(roles)];
      
      if (uniqueRoles.length > 1) {
        problematicChatIds.push({
          chatId,
          users,
          issue: '–†—ñ–∑–Ω—ñ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
        });
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
      const notificationSettings = users.map(u => u.notificationSettings);
      const hasDifferentSettings = notificationSettings.some((settings, index) => {
        if (index === 0) return false;
        return JSON.stringify(settings) !== JSON.stringify(notificationSettings[0]);
      });
      
      if (hasDifferentSettings) {
        problematicChatIds.push({
          chatId,
          users,
          issue: '–†—ñ–∑–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å'
        });
      }
    }
    
    if (problematicChatIds.length > 0) {
      console.log(`‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ ${problematicChatIds.length} –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö Chat ID:\n`);
      
      for (const problem of problematicChatIds) {
        console.log(`üì± Chat ID: ${problem.chatId}`);
        console.log(`   –ü—Ä–æ–±–ª–µ–º–∞: ${problem.issue}`);
        console.log(`   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:`);
        
        for (const user of problem.users) {
          console.log(`     üë§ ${user.login} (${user.name}) - ${user.role}`);
        }
        console.log('');
      }
    } else {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω–∏—Ö Chat ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    console.log('üí° === –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á ===');
    
    if (Object.keys(duplicates).length > 0) {
      console.log('1. üîß –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è Chat ID:');
      for (const [chatId, users] of Object.entries(duplicates)) {
        console.log(`   - Chat ID ${chatId}: ${users.map(u => u.login).join(', ')}`);
        console.log(`     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –∑–∞–ª–∏—à–∏—Ç–∏ –æ–¥–∏–Ω Chat ID, —ñ–Ω—à—ñ –æ–Ω–æ–≤–∏—Ç–∏`);
      }
      
      console.log('\n2. üì± –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å Chat ID:');
      console.log('   - –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏');
      console.log('   - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–µ—Ä–µ–∑ @userinfobot –≤ Telegram');
      console.log('   - –û–Ω–æ–≤–∏—Ç–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ Chat ID');
      
      console.log('\n3. üß™ –ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:');
      console.log('   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø–∞–Ω–µ–ª—å –¥–µ–±–∞–≥—É —Å–ø–æ–≤—ñ—â–µ–Ω—å');
      console.log('   - –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
      console.log('   - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É');
    } else {
      console.log('‚úÖ –î—É–±–ª—é–≤–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
    }
    
    // –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    console.log('\nüìã === –í–°–Ü –ö–û–†–ò–°–¢–£–í–ê–ß–Ü –ó TELEGRAM ===');
    console.log('Chat ID | –õ–æ–≥—ñ–Ω | –Ü–º\'—è | –†–æ–ª—å | –†–µ–≥—ñ–æ–Ω | –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
    console.log('--------|-------|------|------|--------|-------------');
    
    for (const user of usersWithTelegram) {
      const enabledCount = user.notificationSettings ? 
        Object.values(user.notificationSettings).filter(Boolean).length : 0;
      
      console.log(`${user.telegramChatId} | ${user.login} | ${user.name} | ${user.role} | ${user.region || '–ù/–î'} | ${enabledCount} —É–≤—ñ–º–∫–Ω–µ–Ω–æ`);
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ MongoDB');
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—à—É–∫
if (require.main === module) {
  findDuplicateChatIds();
}

module.exports = { findDuplicateChatIds };
