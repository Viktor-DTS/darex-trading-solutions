#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Chat ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
 */

const mongoose = require('mongoose');
require('dotenv').config({ path: './config.env' });

// –°—Ö–µ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const userSchema = new mongoose.Schema({
  login: String,
  password: String,
  role: String,
  name: String,
  region: String,
  columnsSettings: Object,
  id: Number,
  telegramChatId: String,
  lastActivity: { type: Date, default: Date.now },
  notificationSettings: {
    newRequests: { type: Boolean, default: false },
    pendingApproval: { type: Boolean, default: false },
    accountantApproval: { type: Boolean, default: false },
    approvedRequests: { type: Boolean, default: false },
    rejectedRequests: { type: Boolean, default: false },
    invoiceRequests: { type: Boolean, default: false },
    completedInvoices: { type: Boolean, default: false },
    systemNotifications: { type: Boolean, default: false }
  }
});

const User = mongoose.model('User', userSchema);

async function checkOperator() {
  try {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Chat ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...\n');
    
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/dts-service';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB\n');
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    const operator = await User.findOne({ login: 'operator' });
    
    if (!operator) {
      console.log('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á "operator" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
      return;
    }
    
    console.log('üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:');
    console.log(`   –õ–æ–≥—ñ–Ω: ${operator.login}`);
    console.log(`   –Ü–º'—è: ${operator.name}`);
    console.log(`   –†–æ–ª—å: ${operator.role}`);
    console.log(`   –†–µ–≥—ñ–æ–Ω: ${operator.region}`);
    console.log(`   Telegram Chat ID: ${operator.telegramChatId}`);
    console.log(`   ID: ${operator.id}`);
    
    console.log('\nüìã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:');
    if (operator.notificationSettings) {
      for (const [key, value] of Object.entries(operator.notificationSettings)) {
        console.log(`   ${key}: ${value ? '‚úÖ' : '‚ùå'}`);
      }
    } else {
      console.log('   ‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é operator
    console.log('\nüîç –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ —Ä–æ–ª–ª—é "operator":');
    const allOperators = await User.find({ role: 'operator' });
    
    for (const op of allOperators) {
      console.log(`   ${op.login} (${op.name}) - Chat ID: ${op.telegramChatId}`);
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Chat ID —â–æ –º—ñ—Å—Ç–∏—Ç—å 1190497
    console.log('\nüîç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ Chat ID —â–æ –º—ñ—Å—Ç–∏—Ç—å "1190497":');
    const usersWithSimilarChatId = await User.find({
      telegramChatId: { $regex: /1190497/ }
    });
    
    for (const user of usersWithSimilarChatId) {
      console.log(`   ${user.login} (${user.name}) - Chat ID: ${user.telegramChatId} - –†–æ–ª—å: ${user.role}`);
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ MongoDB');
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
if (require.main === module) {
  checkOperator();
}

module.exports = { checkOperator };
