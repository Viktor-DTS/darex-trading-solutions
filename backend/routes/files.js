const express = require('express');
const multer = require('multer');
const mongoose = require('mongoose');
const sharp = require('sharp');
const puppeteer = require('puppeteer');
const path = require('path');
const fs = require('fs');
const router = express.Router();

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó PDF –≤ JPG —á–µ—Ä–µ–∑ Cloudinary Transformations
async function convertPdfToJpgServer(pdfBuffer, originalName) {
  try {
    console.log('[PDF-SERVER] –ü–æ—á–∞—Ç–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó PDF —á–µ—Ä–µ–∑ Cloudinary:', originalName);
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ PDF –≤ Cloudinary –∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –≤ JPG
    const cloudinary = require('cloudinary').v2;
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è PDF
    const tempPdfPath = path.join(__dirname, '..', 'temp', `temp_${Date.now()}.pdf`);
    const tempDir = path.dirname(tempPdfPath);
    
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    fs.writeFileSync(tempPdfPath, pdfBuffer);
    
    console.log('[PDF-SERVER] –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ PDF –≤ Cloudinary –∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—î—é...');
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ PDF –≤ Cloudinary –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—î—é –≤ JPG
    const result = await cloudinary.uploader.upload(tempPdfPath, {
      folder: 'darex-trading-solutions/temp-pdf-conversion',
      resource_type: 'image', // –¶–µ –∑–º—É—Å–∏—Ç—å Cloudinary –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ PDF –≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      format: 'jpg',
      quality: 'auto:good',
      transformation: [
        { format: 'jpg' },
        { quality: 'auto:good' },
        { flags: 'attachment' } // –î–æ–¥–∞—î–º–æ —Ñ–ª–∞–≥ –¥–ª—è –∫—Ä–∞—â–æ—ó –æ–±—Ä–æ–±–∫–∏ PDF
      ]
    });
    
    console.log('[PDF-SERVER] PDF –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ Cloudinary:', result.secure_url);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const response = await fetch(result.secure_url);
    const jpgBuffer = await response.buffer();
    
    // –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
    fs.unlinkSync(tempPdfPath);
    
    // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –∑ Cloudinary
    try {
      await cloudinary.uploader.destroy(result.public_id);
      console.log('[PDF-SERVER] –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Cloudinary');
    } catch (deleteError) {
      console.log('[PDF-SERVER] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –∑ Cloudinary:', deleteError.message);
    }
    
    console.log('[PDF-SERVER] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–æ–∑–º—ñ—Ä JPG:', jpgBuffer.length);
    return jpgBuffer;
    
  } catch (error) {
    console.error('[PDF-SERVER] –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó PDF —á–µ—Ä–µ–∑ Cloudinary:', error);
    throw error;
  }
}

// CORS middleware –¥–ª—è —Ñ–∞–π–ª–æ–≤–∏—Ö —Ä–æ—É—Ç—ñ–≤
router.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', 'https://darex-trading-solutions-f.onrender.com');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
  res.header('Access-Control-Allow-Credentials', 'true');
  
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–º–∏–∫–∞—î–º–æ Cloudinary –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
let cloudinary = null;
let CloudinaryStorage = null;

try {
  cloudinary = require('../config/cloudinary');
  const { CloudinaryStorage: CS } = require('multer-storage-cloudinary');
  CloudinaryStorage = CS;
  console.log('[FILES] Cloudinary –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
} catch (error) {
  console.log('[FILES] Cloudinary –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
}

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É MongoDB
router.use((req, res, next) => {
  if (mongoose.connection.readyState !== 1) {
    console.error('MongoDB –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ä–æ—É—Ç—É! ReadyState:', mongoose.connection.readyState);
    return res.status(503).json({ 
      error: '–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π', 
      readyState: mongoose.connection.readyState 
    });
  }
  next();
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Storage –¥–ª—è multer
let storage;
if (CloudinaryStorage && cloudinary) {
  // Cloudinary Storage
  storage = new CloudinaryStorage({
    cloudinary: cloudinary,
    params: {
      folder: 'darex-trading-solutions',
      allowed_formats: ['jpg', 'jpeg', 'png', 'gif', 'pdf', 'doc', 'docx', 'xls', 'xlsx', 'txt'],
      transformation: [{ width: 1000, height: 1000, crop: 'limit' }]
    }
  });
} else {
  // –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (—Ç–∏–º—á–∞—Å–æ–≤–æ)
  storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, '/tmp/') // –¢–∏–º—á–∞—Å–æ–≤–∞ –ø–∞–ø–∫–∞
    },
    filename: function (req, file, cb) {
      cb(null, Date.now() + '-' + file.originalname)
    }
  });
}

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB –ª—ñ–º—ñ—Ç
  },
  fileFilter: (req, file, cb) => {
    // –î–æ–∑–≤–æ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ–≤–Ω—ñ —Ç–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤
    const allowedTypes = [
      'image/jpeg', 'image/png', 'image/gif',
      'application/pdf', 'application/msword', 
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/vnd.ms-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'text/plain'
    ];
    
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É'), false);
    }
  }
});

// –°—Ö–µ–º–∞ –¥–ª—è —Ñ–∞–π–ª—ñ–≤
const fileSchema = new mongoose.Schema({
  taskId: String,
  originalName: String,
  filename: String,
  cloudinaryId: String,
  cloudinaryUrl: String,
  mimetype: String,
  size: Number,
  uploadDate: { type: Date, default: Date.now },
  description: String
});

const File = mongoose.model('File', fileSchema);

// –†–æ—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
router.get('/ping', (req, res) => {
  res.json({ 
    message: '–§–∞–π–ª–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å –ø—Ä–∞—Ü—é—î!',
    mongodb: {
      connected: mongoose.connection.readyState === 1,
      readyState: mongoose.connection.readyState
    },
    cloudinary: {
      configured: !!(process.env.CLOUDINARY_CLOUD_NAME && process.env.CLOUDINARY_API_KEY && process.env.CLOUDINARY_API_SECRET),
      cloudName: process.env.CLOUDINARY_CLOUD_NAME ? '–ù–ê–õ–ê–®–¢–û–í–ê–ù–û' : '–ù–ï –ù–ê–õ–ê–®–¢–û–í–ê–ù–û',
      apiKey: process.env.CLOUDINARY_API_KEY ? '–ù–ê–õ–ê–®–¢–û–í–ê–ù–û' : '–ù–ï –ù–ê–õ–ê–®–¢–û–í–ê–ù–û',
      apiSecret: process.env.CLOUDINARY_API_SECRET ? '–ù–ê–õ–ê–®–¢–û–í–ê–ù–û' : '–ù–ï –ù–ê–õ–ê–®–¢–û–í–ê–ù–û'
    }
  });
});

// –¢–µ—Å—Ç–æ–≤–∏–π —Ä–æ—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Cloudinary –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
router.get('/test-cloudinary', async (req, res) => {
  try {
    if (!process.env.CLOUDINARY_CLOUD_NAME || !process.env.CLOUDINARY_API_KEY || !process.env.CLOUDINARY_API_SECRET) {
      return res.status(500).json({
        error: 'Cloudinary –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ',
        cloudName: !!process.env.CLOUDINARY_CLOUD_NAME,
        apiKey: !!process.env.CLOUDINARY_API_KEY,
        apiSecret: !!process.env.CLOUDINARY_API_SECRET
      });
    }

    // –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Cloudinary
    const result = await cloudinary.api.ping();
    res.json({
      success: true,
      message: 'Cloudinary –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ',
      result: result
    });
  } catch (error) {
    console.error('[FILES] –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É Cloudinary:', error);
    res.status(500).json({
      error: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Cloudinary',
      details: error.message
    });
  }
});

// –†–æ—É—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
router.post('/upload/:taskId', upload.array('files', 10), async (req, res) => {
  try {
    console.log('[FILES] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è:', req.params.taskId);
    console.log('[FILES] –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤:', req.files ? req.files.length : 0);
    
    // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Cloudinary –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    console.log('[FILES] Cloudinary –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:');
    console.log('[FILES] CLOUDINARY_CLOUD_NAME:', process.env.CLOUDINARY_CLOUD_NAME ? '–ù–ê–õ–ê–®–¢–û–í–ê–ù–û' : '–ù–ï –ù–ê–õ–ê–®–¢–û–í–ê–ù–û');
    console.log('[FILES] CLOUDINARY_API_KEY:', process.env.CLOUDINARY_API_KEY ? '–ù–ê–õ–ê–®–¢–û–í–ê–ù–û' : '–ù–ï –ù–ê–õ–ê–®–¢–û–í–ê–ù–û');
    console.log('[FILES] CLOUDINARY_API_SECRET:', process.env.CLOUDINARY_API_SECRET ? '–ù–ê–õ–ê–®–¢–û–í–ê–ù–û' : '–ù–ï –ù–ê–õ–ê–®–¢–û–í–ê–ù–û');
    console.log('[FILES] Cloudinary –¥–æ—Å—Ç—É–ø–Ω–∏–π:', !!cloudinary);
    
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ error: '–§–∞–π–ª–∏ –Ω–µ –±—É–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ' });
    }

    const uploadedFiles = [];
    const description = req.body.description || '';

    for (const file of req.files) {
      console.log('[FILES] –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É:', file.originalname);
      console.log('[FILES] –§–∞–π–ª –æ–±\'—î–∫—Ç:', file);
      console.log('[FILES] –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ (hex):', Buffer.from(file.originalname, 'utf8').toString('hex'));
      
      let finalFile = file;
      let finalFileName = file.originalname;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ PDF —Ñ–∞–π–ª —ñ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –π–æ–≥–æ
      console.log('[FILES] üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –§–ê–ô–õ–£:');
      console.log('[FILES] - –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É:', file.originalname);
      console.log('[FILES] - MIME —Ç–∏–ø:', file.mimetype);
      console.log('[FILES] - –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É:', file.size);
      console.log('[FILES] - –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É:', file.path);
      console.log('[FILES] - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ PDF:', file.mimetype === 'application/pdf');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ PDF –∑–∞ MIME —Ç–∏–ø–æ–º –∞–±–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
      const isPdfByMime = file.mimetype === 'application/pdf';
      const isPdfByExtension = file.originalname.toLowerCase().endsWith('.pdf');
      const isPdf = isPdfByMime || isPdfByExtension;
      
      console.log('[FILES] - PDF –∑–∞ MIME:', isPdfByMime);
      console.log('[FILES] - PDF –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º:', isPdfByExtension);
      console.log('[FILES] - –ó–∞–≥–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ PDF:', isPdf);
      
      if (isPdf) {
        try {
          console.log('[FILES] ‚úÖ –í–∏—è–≤–ª–µ–Ω–æ PDF —Ñ–∞–π–ª, –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ:', file.originalname);
          
          // –ß–∏—Ç–∞—î–º–æ PDF —Ñ–∞–π–ª
          const pdfBuffer = fs.readFileSync(file.path);
          
          // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ PDF –≤ JPG –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
          const jpgBuffer = await convertPdfToJpgServer(pdfBuffer, file.originalname);
          
          // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª –∑ JPG –¥–∞–Ω–∏–º–∏
          const jpgFileName = file.originalname.replace(/\.pdf$/i, '.jpg');
          const tempJpgPath = path.join(__dirname, '..', 'temp', `converted_${Date.now()}.jpg`);
          
          // –ó–∞–ø–∏—Å—É—î–º–æ JPG –≤ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
          fs.writeFileSync(tempJpgPath, jpgBuffer);
          
          // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç —Ñ–∞–π–ª—É –¥–ª—è JPG
          finalFile = {
            ...file,
            path: tempJpgPath,
            mimetype: 'image/jpeg',
            originalname: jpgFileName,
            size: jpgBuffer.length
          };
          
          finalFileName = jpgFileName;
          
          console.log('[FILES] PDF –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ JPG:', jpgFileName, '—Ä–æ–∑–º—ñ—Ä:', jpgBuffer.length);
          
        } catch (error) {
          console.error('[FILES] –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó PDF:', error);
          // –Ø–∫—â–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
          console.log('[FILES] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π PDF —Ñ–∞–π–ª');
        }
      }
      
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ URL —Ñ–∞–π–ª—É
      let fileUrl = '';
      let cloudinaryId = '';
      
      if (cloudinary && finalFile.path) {
        // Cloudinary
        fileUrl = finalFile.path;
        cloudinaryId = finalFile.public_id;
      } else {
        // –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        fileUrl = `/tmp/${finalFile.filename}`;
        cloudinaryId = '';
      }
      
      // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É (–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –ø—Ä–∞—Ü—é—é—á—É –ª–æ–≥—ñ–∫—É –∑ "–ó–∞–ø–∏—Ç –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫")
      let correctedName = finalFileName;
      try {
        // –°–ø—Ä–æ–±—É—î–º–æ –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ —è–∫ UTF-8 –∑ latin1
        const decoded = Buffer.from(correctedName, 'latin1').toString('utf8');
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–∞–ª–æ –∑–º—ñ—Å—Ç
        if (decoded && decoded !== correctedName && !decoded.includes('')) {
          correctedName = decoded;
        } else {
          // –°–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à–∏–π –º–µ—Ç–æ–¥
          correctedName = decodeURIComponent(escape(correctedName));
        }
      } catch (error) {
        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –∑–∞–ª–∏—à–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –Ω–∞–∑–≤—É
        console.log('[FILES] –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É:', error);
      }
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤ MongoDB
      const fileRecord = new File({
        taskId: req.params.taskId,
        originalName: correctedName,
        filename: file.filename,
        cloudinaryId: cloudinaryId,
        cloudinaryUrl: fileUrl,
        mimetype: file.mimetype,
        size: file.size,
        description: description
      });

      const savedFile = await fileRecord.save();
      console.log('[FILES] –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î:', savedFile._id);
      
      uploadedFiles.push({
        id: savedFile._id,
        originalName: savedFile.originalName,
        cloudinaryUrl: savedFile.cloudinaryUrl,
        size: savedFile.size,
        uploadDate: savedFile.uploadDate,
        description: savedFile.description
      });
    }

    console.log('[FILES] –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤:', uploadedFiles.length);
    res.json({ 
      success: true, 
      message: `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${uploadedFiles.length} —Ñ–∞–π–ª—ñ–≤`,
      files: uploadedFiles 
    });

  } catch (error) {
    console.error('[FILES] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤: ' + error.message });
  }
});

// –†–æ—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤ –∑–∞–≤–¥–∞–Ω–Ω—è
router.get('/task/:taskId', async (req, res) => {
  try {
    console.log('[FILES] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è:', req.params.taskId);
    
    const files = await File.find({ taskId: req.params.taskId }).sort({ uploadDate: -1 });
    
    console.log('[FILES] –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤:', files.length);
    
    const fileList = files.map(file => ({
      id: file._id,
      originalName: file.originalName,
      cloudinaryUrl: file.cloudinaryUrl,
      size: file.size,
      uploadDate: file.uploadDate,
      description: file.description,
      mimetype: file.mimetype
    }));
    
    res.json(fileList);
  } catch (error) {
    console.error('[FILES] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤' });
  }
});

// –†–æ—É—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É
router.delete('/:fileId', async (req, res) => {
  try {
    console.log('[FILES] –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', req.params.fileId);
    
    const file = await File.findById(req.params.fileId);
    if (!file) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –∑ Cloudinary
    if (file.cloudinaryId) {
      try {
        await cloudinary.uploader.destroy(file.cloudinaryId);
        console.log('[FILES] –§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Cloudinary:', file.cloudinaryId);
      } catch (cloudinaryError) {
        console.error('[FILES] –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ Cloudinary:', cloudinaryError);
        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –ë–î –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –≤ Cloudinary
      }
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –∑ MongoDB
    await File.findByIdAndDelete(req.params.fileId);
    console.log('[FILES] –§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ë–î:', req.params.fileId);
    
    res.json({ 
      success: true,
      message: '–§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ' 
    });
  } catch (error) {
    console.error('[FILES] –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É' });
  }
});

// –†–æ—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–π–ª
router.get('/info/:fileId', async (req, res) => {
  try {
    const file = await File.findById(req.params.fileId);
    if (!file) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    res.json({
      id: file._id,
      originalName: file.originalName,
      cloudinaryUrl: file.cloudinaryUrl,
      size: file.size,
      uploadDate: file.uploadDate,
      description: file.description,
      mimetype: file.mimetype
    });
  } catch (error) {
    console.error('[FILES] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–π–ª:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–π–ª' });
  }
});

module.exports = router; 