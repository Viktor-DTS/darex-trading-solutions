#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ Chat ID
 */

const mongoose = require('mongoose');
require('dotenv').config({ path: './config.env' });

// –°—Ö–µ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const userSchema = new mongoose.Schema({
  login: String,
  password: String,
  role: String,
  name: String,
  region: String,
  columnsSettings: Object,
  id: Number,
  telegramChatId: String,
  lastActivity: { type: Date, default: Date.now },
  notificationSettings: {
    newRequests: { type: Boolean, default: false },
    pendingApproval: { type: Boolean, default: false },
    accountantApproval: { type: Boolean, default: false },
    approvedRequests: { type: Boolean, default: false },
    rejectedRequests: { type: Boolean, default: false },
    invoiceRequests: { type: Boolean, default: false },
    completedInvoices: { type: Boolean, default: false },
    systemNotifications: { type: Boolean, default: false }
  }
});

const User = mongoose.model('User', userSchema);

async function fixChatIdIssues() {
  try {
    console.log('üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ Chat ID...\n');
    
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/dts-service';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB\n');
    
    // 1. –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º Chat ID
    console.log('üîß === –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–û–†–û–ñ–ù–Ü–• CHAT ID ===');
    
    const usersWithEmptyChatId = await User.find({
      $or: [
        { telegramChatId: '' },
        { telegramChatId: null },
        { telegramChatId: { $exists: false } }
      ]
    });
    
    console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${usersWithEmptyChatId.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º Chat ID`);
    
    for (const user of usersWithEmptyChatId) {
      console.log(`üë§ ${user.login} (${user.name}) - ${user.role}`);
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Chat ID —è–∫ "Chat ID" (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
      await User.updateOne(
        { _id: user._id },
        { $set: { telegramChatId: 'Chat ID' } }
      );
      
      console.log(`   ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ Chat ID –Ω–∞ "Chat ID"`);
    }
    
    // 2. –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è Chat ID
    console.log('\nüîß === –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –î–£–ë–õ–Æ–í–ê–ù–¨ CHAT ID ===');
    
    // Chat ID 630714439: bugai (admin) vs —Ñ—Ñ—Ñ—Ñ (operator)
    console.log('\nüì± Chat ID 630714439:');
    const bugai = await User.findOne({ login: 'bugai' });
    const ffff = await User.findOne({ login: '—Ñ—Ñ—Ñ—Ñ' });
    
    if (bugai && ffff) {
      console.log(`üë§ bugai (${bugai.name}) - admin - –∑–∞–ª–∏—à–∞—î–º–æ Chat ID ${bugai.telegramChatId}`);
      console.log(`üë§ —Ñ—Ñ—Ñ—Ñ (${ffff.name}) - operator - –∑–º—ñ–Ω—é—î–º–æ Chat ID`);
      
      // –ó–º—ñ–Ω—é—î–º–æ Chat ID –¥–ª—è —Ñ—Ñ—Ñ—Ñ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π
      const newChatId = 'CHAT_ID_NEEDED_—Ñ—Ñ—Ñ—Ñ';
      await User.updateOne(
        { login: '—Ñ—Ñ—Ñ—Ñ' },
        { $set: { telegramChatId: newChatId } }
      );
      
      console.log(`   ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ Chat ID –¥–ª—è —Ñ—Ñ—Ñ—Ñ –Ω–∞ "${newChatId}"`);
    }
    
    // Chat ID 1190497211: servdkbo (regkerivn) vs operator (operator)
    console.log('\nüì± Chat ID 1190497211:');
    const servdkbo = await User.findOne({ login: 'servdkbo' });
    const operator = await User.findOne({ login: 'operator' });
    
    if (servdkbo && operator) {
      console.log(`üë§ servdkbo (${servdkbo.name}) - regkerivn - –∑–∞–ª–∏—à–∞—î–º–æ Chat ID ${servdkbo.telegramChatId}`);
      console.log(`üë§ operator (${operator.name}) - operator - –∑–º—ñ–Ω—é—î–º–æ Chat ID`);
      
      // –ó–º—ñ–Ω—é—î–º–æ Chat ID –¥–ª—è operator –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π
      const newChatId = 'CHAT_ID_NEEDED_operator';
      await User.updateOne(
        { login: 'operator' },
        { $set: { telegramChatId: newChatId } }
      );
      
      console.log(`   ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ Chat ID –¥–ª—è operator –Ω–∞ "${newChatId}"`);
    }
    
    // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä === –ü–ï–†–ï–í–Ü–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–£ ===');
    
    const usersWithTelegram = await User.find({
      telegramChatId: { 
        $exists: true, 
        $ne: null, 
        $ne: '', 
        $ne: 'Chat ID',
        $not: /^CHAT_ID_NEEDED_/
      }
    });
    
    console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –≤–∞–ª—ñ–¥–Ω–∏–º Chat ID: ${usersWithTelegram.length}`);
    
    // –ì—Ä—É–ø—É—î–º–æ –ø–æ Chat ID –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—é–≤–∞–Ω—å
    const chatIdGroups = {};
    for (const user of usersWithTelegram) {
      const chatId = user.telegramChatId;
      if (!chatIdGroups[chatId]) {
        chatIdGroups[chatId] = [];
      }
      chatIdGroups[chatId].push(user);
    }
    
    const remainingDuplicates = Object.entries(chatIdGroups).filter(([chatId, users]) => users.length > 1);
    
    if (remainingDuplicates.length === 0) {
      console.log('‚úÖ –î—É–±–ª—é–≤–∞–Ω—å Chat ID –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è!');
    } else {
      console.log(`‚ùå –ó–∞–ª–∏—à–∏–ª–æ—Å—è ${remainingDuplicates.length} –¥—É–±–ª—é–≤–∞–Ω—å:`);
      for (const [chatId, users] of remainingDuplicates) {
        console.log(`   Chat ID ${chatId}: ${users.map(u => u.login).join(', ')}`);
      }
    }
    
    // 4. –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Chat ID
    console.log('\n‚ö†Ô∏è === –ö–û–†–ò–°–¢–£–í–ê–ß–Ü, –Ø–ö–Ü –ü–û–¢–†–ï–ë–£–Æ–¢–¨ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø CHAT ID ===');
    
    const usersNeedingChatId = await User.find({
      telegramChatId: { $regex: /^CHAT_ID_NEEDED_/ }
    });
    
    if (usersNeedingChatId.length > 0) {
      console.log(`üì± ${usersNeedingChatId.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Chat ID:`);
      
      for (const user of usersNeedingChatId) {
        console.log(`   üë§ ${user.login} (${user.name}) - ${user.role}`);
        console.log(`      –ü–æ—Ç–æ—á–Ω–∏–π Chat ID: ${user.telegramChatId}`);
        console.log(`      –î—ñ—è: –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Chat ID —á–µ—Ä–µ–∑ @userinfobot`);
        console.log('');
      }
    } else {
      console.log('‚úÖ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–∞—é—Ç—å –≤–∞–ª—ñ–¥–Ω—ñ Chat ID');
    }
    
    // 5. –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä === –§–Ü–ù–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    
    const totalUsers = await User.countDocuments();
    const usersWithValidChatId = await User.countDocuments({
      telegramChatId: { 
        $exists: true, 
        $ne: null, 
        $ne: '', 
        $ne: 'Chat ID',
        $not: /^CHAT_ID_NEEDED_/
      }
    });
    const usersWithDefaultChatId = await User.countDocuments({
      telegramChatId: 'Chat ID'
    });
    const usersNeedingChatIdCount = await User.countDocuments({
      telegramChatId: { $regex: /^CHAT_ID_NEEDED_/ }
    });
    
    console.log(`   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${totalUsers}`);
    console.log(`   –ó –≤–∞–ª—ñ–¥–Ω–∏–º Chat ID: ${usersWithValidChatId}`);
    console.log(`   –ó Chat ID "Chat ID" (–ø–æ—Ç—Ä–µ–±—É—é—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è): ${usersWithDefaultChatId}`);
    console.log(`   –ó —Ç–∏–º—á–∞—Å–æ–≤–∏–º Chat ID (–ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è): ${usersNeedingChatIdCount}`);
    
    console.log('\nüí° === –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò ===');
    console.log('1. üì± –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Chat ID –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:');
    console.log('   - –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏');
    console.log('   - –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ Chat ID —á–µ—Ä–µ–∑ @userinfobot');
    console.log('   - –û–Ω–æ–≤–∏—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—ñ');
    
    console.log('\n2. üß™ –ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É:');
    console.log('   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø–∞–Ω–µ–ª—å –¥–µ–±–∞–≥—É —Å–ø–æ–≤—ñ—â–µ–Ω—å');
    console.log('   - –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
    console.log('   - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É');
    
    console.log('\n3. üìã –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É:');
    console.log('   - –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è');
    console.log('   - –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏');
    console.log('   - –û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –ø–æ—Ç—Ä–µ–±–∏');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ MongoDB');
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
if (require.main === module) {
  fixChatIdIssues();
}

module.exports = { fixChatIdIssues };
