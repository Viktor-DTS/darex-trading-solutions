const mongoose = require('mongoose');

class NotificationDebugger {
  constructor() {
    this.User = mongoose.model('User');
    this.NotificationLog = mongoose.model('NotificationLog');
  }

  // –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —ó—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  async analyzeUserSettings() {
    try {
      console.log('\nüîç === –ê–ù–ê–õ–Ü–ó –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ===');
      
      const users = await this.User.find({});
      console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${users.length}`);
      
      const usersWithTelegram = users.filter(u => 
        u.telegramChatId && 
        u.telegramChatId.trim() && 
        u.telegramChatId !== 'Chat ID'
      );
      console.log(`üì± –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ Telegram Chat ID: ${usersWithTelegram.length}`);
      
      const usersWithoutTelegram = users.filter(u => 
        !u.telegramChatId || 
        !u.telegramChatId.trim() || 
        u.telegramChatId === 'Chat ID'
      );
      console.log(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±–µ–∑ Telegram Chat ID: ${usersWithoutTelegram.length}`);
      
      // –ê–Ω–∞–ª—ñ–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–ø–æ–≤—ñ—â–µ–Ω—å
      const notificationTypes = [
        'newRequests', 'pendingApproval', 'accountantApproval', 
        'approvedRequests', 'rejectedRequests', 'invoiceRequests', 
        'completedInvoices', 'systemNotifications'
      ];
      
      console.log('\nüìã === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–ü–û–í–Ü–©–ï–ù–¨ ===');
      for (const type of notificationTypes) {
        const usersWithType = usersWithTelegram.filter(u => 
          u.notificationSettings && u.notificationSettings[type] === true
        );
        console.log(`${type}: ${usersWithType.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
        
        if (usersWithType.length > 0) {
          console.log(`  ‚îî‚îÄ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: ${usersWithType.map(u => u.login).join(', ')}`);
        }
      }
      
      // –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      console.log('\nüë• === –î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ===');
      for (const user of usersWithTelegram) {
        console.log(`\nüë§ ${user.login} (${user.name})`);
        console.log(`   –†–æ–ª—å: ${user.role}`);
        console.log(`   –†–µ–≥—ñ–æ–Ω: ${user.region || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`   Telegram Chat ID: ${user.telegramChatId}`);
        console.log(`   –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:`);
        
        if (user.notificationSettings) {
          for (const [key, value] of Object.entries(user.notificationSettings)) {
            console.log(`     ${key}: ${value ? '‚úÖ' : '‚ùå'}`);
          }
        } else {
          console.log(`     ‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ`);
        }
      }
      
      // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±–µ–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
      if (usersWithoutTelegram.length > 0) {
        console.log('\n‚ùå === –ö–û–†–ò–°–¢–£–í–ê–ß–Ü –ë–ï–ó TELEGRAM ===');
        for (const user of usersWithoutTelegram) {
          console.log(`üë§ ${user.login} (${user.name}) - ${user.role} - ${user.region || '–ë–µ–∑ —Ä–µ–≥—ñ–æ–Ω—É'}`);
        }
      }
      
      return {
        totalUsers: users.length,
        usersWithTelegram: usersWithTelegram.length,
        usersWithoutTelegram: usersWithoutTelegram.length,
        notificationSettings: this.getNotificationStats(usersWithTelegram, notificationTypes)
      };
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
      return null;
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–ø–æ–≤—ñ—â–µ–Ω—å
  getNotificationStats(users, notificationTypes) {
    const stats = {};
    for (const type of notificationTypes) {
      stats[type] = users.filter(u => 
        u.notificationSettings && u.notificationSettings[type] === true
      ).length;
    }
    return stats;
  }

  // –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
  async simulateNotification(type, data) {
    try {
      console.log(`\nüß™ === –°–ò–ú–£–õ–Ø–¶–Ü–Ø –°–ü–û–í–Ü–©–ï–ù–ù–Ø: ${type} ===`);
      console.log('üìã –î–∞–Ω—ñ:', JSON.stringify(data, null, 2));
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
      const query = {
        telegramChatId: { 
          $exists: true, 
          $ne: null, 
          $ne: '', 
          $ne: 'Chat ID' 
        }
      };
      
      // –î–æ–¥–∞—î–º–æ —É–º–æ–≤—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É —Å–ø–æ–≤—ñ—â–µ–Ω—å
      let notificationKey;
      switch (type) {
        case 'system_notifications':
          notificationKey = 'systemNotifications';
          break;
        case 'new_requests':
          notificationKey = 'newRequests';
          break;
        case 'pending_approval':
          notificationKey = 'pendingApproval';
          break;
        case 'accountant_approval':
          notificationKey = 'accountantApproval';
          break;
        case 'approved_requests':
          notificationKey = 'approvedRequests';
          break;
        case 'rejected_requests':
          notificationKey = 'rejectedRequests';
          break;
        case 'invoice_requested':
          notificationKey = 'invoiceRequests';
          break;
        case 'invoice_completed':
          notificationKey = 'completedInvoices';
          break;
        default:
          notificationKey = type;
      }
      
      query[`notificationSettings.${notificationKey}`] = true;
      
      console.log(`üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–º ${notificationKey}`);
      console.log('üìù –ó–∞–ø–∏—Ç:', JSON.stringify(query, null, 2));
      
      const users = await this.User.find(query);
      console.log(`üë• –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${users.length}`);
      
      if (users.length === 0) {
        console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
        return { success: false, reason: 'No users found' };
      }
      
      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö (–∫—Ä—ñ–º —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å)
      let filteredUsers = users;
      
      if (type !== 'system_notifications' && data.task) {
        console.log(`üåç –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö. –†–µ–≥—ñ–æ–Ω –∑–∞—è–≤–∫–∏: ${data.task.serviceRegion}`);
        
        filteredUsers = users.filter(user => {
          // –Ø–∫—â–æ —Ä–µ–≥—ñ–æ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "–£–∫—Ä–∞—ó–Ω–∞" - –æ—Ç—Ä–∏–º—É—î –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
          if (user.region === '–£–∫—Ä–∞—ó–Ω–∞') {
            console.log(`  ‚úÖ ${user.login} - —Ä–µ–≥—ñ–æ–Ω "–£–∫—Ä–∞—ó–Ω–∞", –æ—Ç—Ä–∏–º—É—î –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è`);
            return true;
          }
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤
          const userRegions = user.region ? user.region.split(',').map(r => r.trim()) : [];
          const taskRegion = data.task.serviceRegion;
          
          if (!taskRegion) {
            console.log(`  ‚ùå ${user.login} - –Ω–µ–º–∞—î —Ä–µ–≥—ñ–æ–Ω—É –∑–∞—è–≤–∫–∏`);
            return false;
          }
          
          const matches = userRegions.some(userRegion => 
            userRegion.toLowerCase().includes(taskRegion.toLowerCase()) || 
            taskRegion.toLowerCase().includes(userRegion.toLowerCase())
          );
          
          console.log(`  ${matches ? '‚úÖ' : '‚ùå'} ${user.login} - —Ä–µ–≥—ñ–æ–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: [${userRegions.join(', ')}], —Ä–µ–≥—ñ–æ–Ω –∑–∞—è–≤–∫–∏: ${taskRegion}`);
          return matches;
        });
      }
      
      // –í–∏–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ—Ä–∞ –¥—ñ—ó
      if (data.authorLogin) {
        const beforeExclude = filteredUsers.length;
        filteredUsers = filteredUsers.filter(user => user.login !== data.authorLogin);
        console.log(`üë§ –í–∏–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ—Ä–∞ ${data.authorLogin}: ${beforeExclude} ‚Üí ${filteredUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
      }
      
      console.log(`üì§ –ü—ñ–¥—Å—É–º–æ–∫: –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ${filteredUsers.length} —Å–ø–æ–≤—ñ—â–µ–Ω—å`);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–∂–Ω–æ–≥–æ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
      for (const user of filteredUsers) {
        console.log(`  üì± ${user.login} (${user.name}) - Chat ID: ${user.telegramChatId} - –†–µ–≥—ñ–æ–Ω: ${user.region}`);
      }
      
      return {
        success: true,
        totalUsers: users.length,
        filteredUsers: filteredUsers.length,
        recipients: filteredUsers.map(u => ({
          login: u.login,
          name: u.name,
          chatId: u.telegramChatId,
          region: u.region
        }))
      };
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
      return { success: false, error: error.message };
    }
  }

  // –ê–Ω–∞–ª—ñ–∑ –ª–æ–≥—ñ–≤ —Å–ø–æ–≤—ñ—â–µ–Ω—å
  async analyzeNotificationLogs(limit = 50) {
    try {
      console.log(`\nüìä === –ê–ù–ê–õ–Ü–ó –õ–û–ì–Ü–í –°–ü–û–í–Ü–©–ï–ù–¨ (–æ—Å—Ç–∞–Ω–Ω—ñ ${limit}) ===`);
      
      const logs = await this.NotificationLog.find({})
        .sort({ sentAt: -1 })
        .limit(limit);
      
      console.log(`üìã –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–≥—ñ–≤: ${logs.length}`);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
      const statusStats = {};
      const typeStats = {};
      
      for (const log of logs) {
        statusStats[log.status] = (statusStats[log.status] || 0) + 1;
        typeStats[log.type] = (typeStats[log.type] || 0) + 1;
      }
      
      console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö:');
      for (const [status, count] of Object.entries(statusStats)) {
        console.log(`  ${status}: ${count}`);
      }
      
      console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö:');
      for (const [type, count] of Object.entries(typeStats)) {
        console.log(`  ${type}: ${count}`);
      }
      
      // –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏
      const failedLogs = logs.filter(log => log.status === 'failed');
      if (failedLogs.length > 0) {
        console.log(`\n‚ùå –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏ (${failedLogs.length}):`);
        for (const log of failedLogs.slice(0, 5)) {
          console.log(`  ${log.sentAt.toISOString()} - ${log.type} - ${log.telegramChatId} - ${log.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`);
        }
      }
      
      return {
        totalLogs: logs.length,
        statusStats,
        typeStats,
        failedLogs: failedLogs.length
      };
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ª–æ–≥—ñ–≤:', error);
      return null;
    }
  }

  // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
  async testUserNotification(userLogin, message = 'üß™ –¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è') {
    try {
      console.log(`\nüß™ === –¢–ï–°–¢ –°–ü–û–í–Ü–©–ï–ù–ù–Ø –î–õ–Ø ${userLogin} ===`);
      
      const user = await this.User.findOne({ login: userLogin });
      if (!user) {
        console.log(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userLogin} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
        return { success: false, reason: 'User not found' };
      }
      
      if (!user.telegramChatId || user.telegramChatId === 'Chat ID') {
        console.log(`‚ùå –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userLogin} –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π Telegram Chat ID`);
        return { success: false, reason: 'No Telegram Chat ID' };
      }
      
      console.log(`üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${user.name} (${user.role})`);
      console.log(`üì± Chat ID: ${user.telegramChatId}`);
      console.log(`üåç –†–µ–≥—ñ–æ–Ω: ${user.region || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
      console.log(`üìã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:`, user.notificationSettings);
      
      // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram API
      console.log(`üì§ –ë—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${message}"`);
      
      return {
        success: true,
        user: {
          login: user.login,
          name: user.name,
          chatId: user.telegramChatId,
          region: user.region,
          notificationSettings: user.notificationSettings
        }
      };
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
      return { success: false, error: error.message };
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –ø—Ä–æ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
  async generateSystemReport() {
    try {
      console.log('\nüìä === –ó–í–Ü–¢ –ü–†–û –°–¢–ê–ù –°–ò–°–¢–ï–ú–ò –°–ü–û–í–Ü–©–ï–ù–¨ ===');
      
      const userAnalysis = await this.analyzeUserSettings();
      const logAnalysis = await this.analyzeNotificationLogs();
      
      const report = {
        timestamp: new Date().toISOString(),
        userAnalysis,
        logAnalysis,
        recommendations: this.generateRecommendations(userAnalysis, logAnalysis)
      };
      
      console.log('\nüí° === –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á ===');
      for (const rec of report.recommendations) {
        console.log(`  ‚Ä¢ ${rec}`);
      }
      
      return report;
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É:', error);
      return null;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
  generateRecommendations(userAnalysis, logAnalysis) {
    const recommendations = [];
    
    if (!userAnalysis) return recommendations;
    
    if (userAnalysis.usersWithoutTelegram > 0) {
      recommendations.push(`–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Telegram Chat ID –¥–ª—è ${userAnalysis.usersWithoutTelegram} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
    }
    
    if (userAnalysis.notificationSettings) {
      const settings = userAnalysis.notificationSettings;
      for (const [type, count] of Object.entries(settings)) {
        if (count === 0) {
          recommendations.push(`–ñ–æ–¥–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∏–ø—É "${type}"`);
        }
      }
    }
    
    if (logAnalysis && logAnalysis.failedLogs > 0) {
      recommendations.push(`–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ ${logAnalysis.failedLogs} –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤ –ª–æ–≥–∞—Ö`);
    }
    
    return recommendations;
  }
}

module.exports = NotificationDebugger;
