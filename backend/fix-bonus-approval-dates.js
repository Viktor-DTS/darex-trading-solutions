const mongoose = require('mongoose');
require('dotenv').config();

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
const connectToMongoDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/dts-service', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', error);
    return false;
  }
};

// –°—Ö–µ–º–∞ –∑–∞—è–≤–∫–∏
const taskSchema = new mongoose.Schema({
  requestNumber: String,
  requestDate: String,
  client: String,
  address: String,
  requestDesc: String,
  serviceRegion: String,
  company: String,
  status: String,
  date: String,
  engineer1: String,
  engineer2: String,
  workPrice: String,
  oilTotal: String,
  filterSum: String,
  fuelFilterSum: String,
  airFilterSum: String,
  antifreezeSum: String,
  otherSum: String,
  totalPrice: String,
  approvedByWarehouse: String,
  warehouseComment: String,
  approvedByAccountant: String,
  accountantComment: String,
  accountantComments: String,
  approvedByRegionalManager: String,
  regionalManagerComment: String,
  bonusApprovalDate: String,
  reportMonthYear: String,
  isImported: Boolean
}, { strict: false });

const Task = mongoose.model('Task', taskSchema);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è bonusApprovalDate
const fixBonusApprovalDates = async () => {
  try {
    console.log('üîç –ü–æ—à—É–∫ –∑–∞—è–≤–æ–∫ –±–µ–∑ bonusApprovalDate...');
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∑–∞—è–≤–∫–∏ –±–µ–∑ bonusApprovalDate
    const tasksWithoutBonusDate = await Task.find({
      $or: [
        { bonusApprovalDate: { $exists: false } },
        { bonusApprovalDate: null },
        { bonusApprovalDate: '' }
      ]
    });

    console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${tasksWithoutBonusDate.length} –∑–∞—è–≤–æ–∫ –±–µ–∑ bonusApprovalDate`);

    let updatedCount = 0;
    let skippedCount = 0;

    for (const task of tasksWithoutBonusDate) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞—è–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤—Å—ñ–º–∞ —Ä–æ–ª—è–º–∏
      const isWarehouseApproved = task.approvedByWarehouse === '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' || task.approvedByWarehouse === true;
      const isAccountantApproved = task.approvedByAccountant === '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' || task.approvedByAccountant === true;
      const isRegionalManagerApproved = task.approvedByRegionalManager === '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' || task.approvedByRegionalManager === true;

      // –Ø–∫—â–æ –∑–∞—è–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ —Å–∫–ª–∞–¥–æ–º —Ç–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–º, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ bonusApprovalDate
      if (isWarehouseApproved && isAccountantApproved && task.workPrice) {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ bonusApprovalDate –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
        const now = new Date();
        const currentMonth = String(now.getMonth() + 1).padStart(2, '0');
        const currentYear = now.getFullYear();
        const bonusApprovalDate = `${currentMonth}-${currentYear}`;

        await Task.updateOne(
          { _id: task._id },
          { $set: { bonusApprovalDate: bonusApprovalDate } }
        );

        console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞—è–≤–∫—É ${task._id}: bonusApprovalDate = ${bonusApprovalDate}`);
        updatedCount++;
      } else {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞—è–≤–∫—É ${task._id}: –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤—Å—ñ–º–∞ —Ä–æ–ª—è–º–∏ –∞–±–æ –Ω–µ–º–∞—î workPrice`);
        skippedCount++;
      }
    }

    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:`);
    console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount} –∑–∞—è–≤–æ–∫`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} –∑–∞—è–≤–æ–∫`);
    console.log(`üìä –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${tasksWithoutBonusDate.length} –∑–∞—è–≤–æ–∫`);

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ bonusApprovalDate:', error);
  }
};

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
const main = async () => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è bonusApprovalDate...');
  
  const connected = await connectToMongoDB();
  if (!connected) {
    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ MongoDB');
    process.exit(1);
  }

  await fixBonusApprovalDates();
  
  console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  await mongoose.disconnect();
  process.exit(0);
};

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch(console.error);
