const https = require('https');

console.log('üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø ENDPOINT INVOICE-REQUESTS');
console.log('=====================================\n');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è endpoint'—É
function testEndpoint(url, description) {
  return new Promise((resolve) => {
    console.log(`üîç –¢–µ—Å—Ç—É—î–º–æ: ${description}`);
    console.log(`   URL: ${url}`);
    
    const req = https.get(url, (res) => {
      let data = '';
      
      res.on('data', chunk => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log(`   Status: ${res.statusCode}`);
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(data);
            console.log('   ‚úÖ –£—Å–ø—ñ—à–Ω–æ');
            console.log('   üìä Response structure:');
            console.log(`      - success: ${response.success}`);
            console.log(`      - data type: ${typeof response.data}`);
            if (response.data) {
              console.log(`      - data._id: ${response.data._id}`);
              console.log(`      - data.requestNumber: ${response.data.requestNumber}`);
              console.log(`      - data.status: ${response.data.status}`);
            } else {
              console.log('      - data: null/undefined');
            }
            resolve(response);
          } catch (error) {
            console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:', error.message);
            console.log('   Raw response:', data.substring(0, 200) + '...');
            resolve(null);
          }
        } else if (res.statusCode === 404) {
          console.log('   ‚ùå Not Found');
          resolve(null);
        } else {
          console.log(`   ‚ö†Ô∏è  –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å: ${res.statusCode}`);
          console.log('   Response:', data.substring(0, 200) + '...');
          resolve(null);
        }
        console.log('');
      });
    });
    
    req.on('error', (error) => {
      console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error.message);
      console.log('');
      resolve(null);
    });
    
    req.setTimeout(10000, () => {
      console.log('   ‚è∞ Timeout');
      console.log('');
      req.destroy();
      resolve(null);
    });
  });
}

async function main() {
  try {
    // –¢–µ—Å—Ç 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
    await testEndpoint(
      'https://darex-trading-solutions.onrender.com/api/invoice-requests',
      '–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫–∏'
    );
    
    // –¢–µ—Å—Ç 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ç–µ—Å—Ç—É)
    await testEndpoint(
      'https://darex-trading-solutions.onrender.com/api/invoice-requests/68e637d7af11b7e215887380',
      '–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫'
    );
    
    // –¢–µ—Å—Ç 3: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –∑–∞–ø–∏—Ç—É
    await testEndpoint(
      'https://darex-trading-solutions.onrender.com/api/invoice-requests/nonexistent',
      '–ù–µ—ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Ç (–æ—á—ñ–∫—É—î–º–æ 404)'
    );
    
    console.log('‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
  }
}

main();
